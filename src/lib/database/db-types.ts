/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from 'kysely';

export type Generated<T> =
    T extends ColumnType<infer S, infer I, infer U> ? ColumnType<S, I | undefined, U> : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
    [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<string, string, string>;

export interface BoardMember {
    created_at: Generated<Timestamp | null>;
    id: Generated<string>;
    image: string;
    label: string;
    name: string;
    position: string;
    updated_at: Generated<Timestamp | null>;
}

export interface CalendarEventAttachment {
    calendar_event_id: string;
    created_at: Generated<Timestamp | null>;
    description: string | null;
    display_order: Generated<number | null>;
    file_type: string | null;
    file_url: string | null;
    filename: string;
    id: Generated<string>;
}

export interface CalendarEventContact {
    calendar_event_id: string | null;
    created_at: Generated<Timestamp>;
    email: string | null;
    id: Generated<string>;
    name: string;
    phone: string | null;
    updated_at: Generated<Timestamp>;
}

export interface CalendarEvent {
    all_day: Generated<boolean>;
    created_at: Generated<Timestamp | null>;
    description: Generated<string>;
    end_date_tbd: Generated<boolean>;
    end_datetime: Timestamp | null;
    end_time_tbd: Generated<boolean>;
    event_type: Generated<string>;
    id: Generated<string>;
    is_members_only: Generated<boolean>;
    is_published: Generated<boolean>;
    location: Generated<string>;
    meta: Generated<Json>;
    parent_event_id: string | null;
    recurrence_rule_id: string | null;
    start_date_tbd: Generated<boolean>;
    start_datetime: Timestamp | null;
    start_time_tbd: Generated<boolean>;
    timezone: Generated<string>;
    title: string;
    updated_at: Generated<Timestamp | null>;
}

export interface HistoryReport {
    author: string;
    body: string;
    created_at: Generated<Timestamp | null>;
    date: Generated<string | null>;
    id: Generated<string>;
    tags: Generated<string[]>;
    title: string;
    updated_at: Generated<Timestamp | null>;
}

export interface RecurrenceAddition {
    calendar_event_id: string;
    date: Timestamp;
    id: Generated<string>;
    reason: Generated<string | null>;
}

export interface RecurrenceException {
    calendar_event_id: string;
    date: Timestamp;
    id: Generated<string>;
    reason: Generated<string | null>;
}

export interface RecurrenceRule {
    by_day: string[] | null;
    by_hour: number[] | null;
    by_minute: number[] | null;
    by_month: number[] | null;
    by_month_day: number[] | null;
    by_second: number[] | null;
    by_set_position: number[] | null;
    by_week_number: number[] | null;
    by_year_day: number[] | null;
    count: number | null;
    created_at: Generated<Timestamp>;
    frequency: string;
    id: Generated<string>;
    interval: Generated<number>;
    label: string;
    until: Timestamp | null;
    updated_at: Generated<Timestamp>;
    week_start: Generated<string>;
}

export interface SchemaMigration {
    dirty: boolean;
    version: Int8;
}

export interface DB {
    board_members: BoardMember;
    calendar_event_attachments: CalendarEventAttachment;
    calendar_event_contacts: CalendarEventContact;
    calendar_events: CalendarEvent;
    history_reports: HistoryReport;
    recurrence_additions: RecurrenceAddition;
    recurrence_exceptions: RecurrenceException;
    recurrence_rules: RecurrenceRule;
    schema_migrations: SchemaMigration;
}
