CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; -- Enable UUID extension if not already enabled

CREATE TABLE recurrence_rules
(
    id              UUID PRIMARY KEY            DEFAULT gen_random_uuid(),
    label           VARCHAR(255) NOT NULL,
    frequency       VARCHAR(10)  NOT NULL CHECK (frequency IN
                                                 ('SECONDLY', 'MINUTELY', 'HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY',
                                                  'YEARLY')),                   -- Frequency of recurrence (required). Valid values: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY
    interval        INTEGER      NOT NULL       DEFAULT 1 CHECK (interval > 0), -- Interval between each recurrence. Default is 1.
    count           INTEGER                     DEFAULT NULL,                   -- Total number of occurrences. Mutually exclusive with until.
    until           TIMESTAMP WITHOUT TIME ZONE DEFAULT NULL,                   -- Date/time to stop recurrence. Mutually exclusive with count.
    by_second       INTEGER[]                   DEFAULT NULL,                   -- Seconds within a minute to recur on (0-59). Optional.
    by_minute       INTEGER[]                   DEFAULT NULL,                   -- Minutes within an hour to recur on (0-59). Optional.
    by_hour         INTEGER[]                   DEFAULT NULL,                   -- Hours within a day to recur on (0-23). Optional.
    by_day          TEXT[]                      DEFAULT NULL,                   -- Days of the week to recur on. Examples: 'MO', '2TU', '-1FR' (second Tuesday, last Friday).
    by_month_day    INTEGER[]                   DEFAULT NULL,                   -- Days of the month to recur on (1 to 31 or -31 to -1). Optional.
    by_year_day     INTEGER[]                   DEFAULT NULL,                   -- Days of the year to recur on (1 to 366 or -366 to -1). Optional.
    by_week_number  INTEGER[]                   DEFAULT NULL,                   -- ISO week numbers to recur on (1 to 53 or -53 to -1). Optional.
    by_month        INTEGER[]                   DEFAULT NULL,                   -- Months of the year to recur on (1=January to 12=December). Optional.
    by_set_position INTEGER[]                   DEFAULT NULL,                   -- Filter to select nth occurrence within the set generated by the rule (e.g., 1 = first, -1 = last). Optional.
    week_start      VARCHAR(2)   NOT NULL       DEFAULT 'MO',                   -- Week start day (default Monday). Affects calculations of weeks.

    created_at      TIMESTAMPTZ  NOT NULL       DEFAULT now(),
    updated_at      TIMESTAMPTZ  NOT NULL       DEFAULT now()
);

CREATE TABLE IF NOT EXISTS calendar_events
(
    id                 UUID PRIMARY KEY            DEFAULT gen_random_uuid(),
    title              VARCHAR(500)  NOT NULL,
    description        VARCHAR(1000) NOT NULL      DEFAULT '',
    location           VARCHAR(1000) NOT NULL      DEFAULT '',

    -- Original event timing
    start_datetime     TIMESTAMP WITHOUT TIME ZONE DEFAULT NULL,
    end_datetime       TIMESTAMP WITHOUT TIME ZONE DEFAULT NULL,
    start_date_tbd     BOOLEAN       NOT NULL      DEFAULT FALSE,
    end_date_tbd       BOOLEAN       NOT NULL      DEFAULT FALSE,
    start_time_tbd     BOOLEAN       NOT NULL      DEFAULT FALSE,
    end_time_tbd       BOOLEAN       NOT NULL      DEFAULT FALSE,
    all_day            BOOLEAN       NOT NULL      DEFAULT FALSE,
    timezone           VARCHAR(100)  NOT NULL      DEFAULT 'America/Los_Angeles',
    event_type         VARCHAR(100)  NOT NULL      DEFAULT 'other' CHECK (event_type IN
                                                                          ('meeting', 'doins', 'picnic', 'ceremony',
                                                                           'social',
                                                                           'fundraiser', 'historical', 'other')),
    is_members_only    BOOLEAN       NOT NULL      DEFAULT FALSE,
    is_published       BOOLEAN       NOT NULL      DEFAULT FALSE,
    parent_event_id    UUID                        DEFAULT NULL REFERENCES calendar_events (id) ON DELETE CASCADE,
    recurrence_rule_id UUID                        DEFAULT NULL REFERENCES recurrence_rules (id) ON DELETE SET NULL,

    meta               JSONB         NOT NULL      DEFAULT '{}',
    created_at         TIMESTAMPTZ                 DEFAULT NOW(),
    updated_at         TIMESTAMPTZ                 DEFAULT NOW()
);
-- Check events.timezone is a valid IANA timezone
CREATE OR REPLACE FUNCTION is_valid_timezone(tz TEXT) RETURNS BOOLEAN
    LANGUAGE sql
    STABLE AS
$$
SELECT EXISTS (SELECT 1 FROM pg_timezone_names WHERE name = tz);
$$;
ALTER TABLE calendar_events
    ADD CONSTRAINT tz_check CHECK (is_valid_timezone(timezone));

CREATE INDEX IF NOT EXISTS idx_calendar_event_start_datetime ON calendar_events (start_datetime);
CREATE INDEX IF NOT EXISTS idx_calendar_event_end_datetime ON calendar_events (end_datetime);
CREATE INDEX IF NOT EXISTS idx_calendar_event_event_type ON calendar_events (event_type);
CREATE INDEX IF NOT EXISTS idx_calendar_event_is_published ON calendar_events (is_published);
DROP TRIGGER IF EXISTS calendar_event_updated_at ON calendar_events;
CREATE TRIGGER calendar_event_updated_at
    BEFORE UPDATE
    ON calendar_events
    FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TABLE calendar_event_contacts
(
    id                UUID PRIMARY KEY      DEFAULT gen_random_uuid(),
    calendar_event_id UUID REFERENCES calendar_events (id) ON DELETE CASCADE,
    name              VARCHAR(255) NOT NULL,
    email             VARCHAR(320),
    phone             VARCHAR(20),
    created_at        TIMESTAMPTZ  NOT NULL DEFAULT now(),
    updated_at        TIMESTAMPTZ  NOT NULL DEFAULT now()
);
CREATE UNIQUE INDEX idx_calendar_event_contact_unique ON calendar_event_contacts (calendar_event_id, name, email, phone);

CREATE TABLE calendar_event_attachments
(
    id                UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    calendar_event_id UUID         NOT NULL REFERENCES calendar_events (id) ON DELETE CASCADE,

    filename          VARCHAR(255) NOT NULL,
    file_url          VARCHAR(2000),              -- Could be local or cloud storage
    file_type         VARCHAR(20),                -- "image", "pdf", "document"
    description       TEXT,                       -- "Group photo from last year's picnic"
    display_order     INTEGER          DEFAULT 0, -- For sorting attachments

    created_at        TIMESTAMPTZ      DEFAULT NOW(),

    CONSTRAINT calendar_event_attachments_file_type_check CHECK (file_type IN ('image', 'pdf', 'document', 'other'))
);
CREATE INDEX idx_calendar_event_attachment_event_id ON calendar_event_attachments (calendar_event_id);

CREATE TABLE recurrence_exceptions
(
    id                UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    calendar_event_id UUID        NOT NULL REFERENCES calendar_events (id) ON DELETE CASCADE,
    date              TIMESTAMPTZ NOT NULL,
    reason            VARCHAR(255)     DEFAULT '' -- "Holiday conflict", "Venue unavailable"
);
CREATE UNIQUE INDEX idx_recurrence_exceptions_unique ON recurrence_exceptions (calendar_event_id, date);

CREATE TABLE recurrence_additions
(
    id                UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    calendar_event_id UUID        NOT NULL REFERENCES calendar_events (id) ON DELETE CASCADE,
    date              TIMESTAMPTZ NOT NULL,
    reason            VARCHAR(255)     DEFAULT '' -- "Special anniversary doins"
);
CREATE UNIQUE INDEX idx_recurrence_additions_unique ON recurrence_additions (calendar_event_id, date);
